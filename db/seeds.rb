# This file should contain all the record creation needed to seed the database with its default values.
# The data can then be loaded with the rake db:seed (or created alongside the db with db:setup),.
#
# Examples:
#
#   cities = City.create([{ name: 'Chicago' }, { name: 'Copenhagen' }]),
#   Mayor.create(name: 'Emanuel', city: cities.first),

langs = {'pl' => 4, 'uk' => 3, 'de' => 5, 'fr' => 5, 'pt' => 3, 'it' => 2, 
  'es' => 4, 'nl' => 3, 'br' => 5, 'tr' => 4, 'hr' => 1, 'se' => 1}

langs.each do |lang, worlds|
  worlds.times {|front| Factory :world, :lang => lang, :front => front+1}
end

conditions = {6 => %w(14746	23746),
7 => %w(23593	38339	47339),
8 => %w(37749	61342	76088	70342	85088),
9 => %w(60398	98147	121740	136486	107147	130740	145486),
10 => %w(96637	157035	194784	218377	233123	166035	203784	227377	242123),
11 => %w(154619	251256	311654	349403	372996	387742	260256	320654	358403	381996	396742),
12 => %w(247390	402009	498646	559044	596793	620386	635132	411009	507646	568044	605793	629386	644132),
13 => %w(395824	643214	797833	894470	954868	992617	1016210	1030956	652214	806833	903470	963868	1001617	1025210	1039956),
14 => %w(633319	1029143	1276533	1431152	1527789	1588187	1625936	1649529	1664275	1038143	1285533	1440152	1536789	1597187	1634936	1658529	1673275),
15 => %w(1013310	1646629	2042453	2289843	2444462	2541099	2601497	2639246	2662839	2677585	1655629	2051453	2298843	2453462	2550099	2610497	2648246	2671839	2686585),
16 => %w(1621296	2634606	3267925	3663749	3911139	4065758	4162395	4222793	4260542	4284135	4298881	2643606	3276925	3672749	3920139	4074758	4171395	4231793	4269542	4293135	4307881),
17 => %w(2594073	4215369	5228679	5861998	6257822	6505212	6659831	6756468	6816866	6854615	6878208	6892954	4224369	5237679	5870998	6266822	6514212	6668831	6765468	6825866	6863615	6887208	6901954),
18 => %w(4150517	6744590	8365886	9379196	10012515	10408339	10655729	10810348	10906985	10967383	11005132	11028725	11043471	6753590	8374886	9388196	10021515	10417339	10664729	10819348	10915985	10976383	11014132	11037725	11052471),
19 => %w(6640828	10791345	13385418	15006714	16020024	16653343	17049167	17296557	17451176	17547813	17608211	17645960	17669553	17684299	10800345	13394418	15015714	16029024	16662343	17058167	17305557	17460176	17556813	17617211	17654960	17678553	17693299),
20 => %w(10625325	17266153	21416670	24010743	25632039	26645349	27278668	27674492	27921882	28076501	28173138	28233536	28271285	28294878	28309624	17275153	21425670	24019743	25641039	26654349	27287668	27683492	27930882	28085501	28182138	28242536	28280285	28303878	28318624),
21 => %w(17000519	27625844	34266672	38417189	41011262	42632558	43645868	44279187	44675011	44922401	45077020	45173657	45234055	45271804	45295397	45310143	27634844	34275672	38426189	41020262	42641558	43654868	44288187	44684011	44931401	45086020	45182657	45243055	45280804	45304397	45319143),
22 => %w(27200831	44201350	54826675	61467503	65618020	68212093	69833389	70846699	71480018	71875842	72123232	72277851	72374488	72434886	72472635	72496228	72510974	44210350	54835675	61476503	65627020	68221093	69842389	70855699	71489018	71884842	72132232	72286851	72383488	72443886	72481635	72505228	72519974),
23 => %w(43521330	70722161	87722680	98348005	104988833	109139350	111733423	113354719	114368029	115001348	115397172	115644562	115799181	115895818	115956216	115993965	116017558	116032304	87731680	98357005	104997833	109148350	111742423	113363719	114377029	115010348	115406172	115653562	115808181	115904818	115965216	116002965	116026558	116041304),
24 => %w(69632127	113153457	140354288	157354807	167980132	174620960	178771477	181365550	182986846	184000156	184633475	185029299	185276689	185431308	185527945	185588343	185626092	185649685	185664431	113162457	140363288	157363807	167989132	174629960	178780477	181374550	182995846	184009156	184642475	185038299	185285689	185440308	185536945	185597343	185635092	185658685	185673431),
25 => %w(111414604	181046731	224568061	251768892	268769411	279394736	286035564	290186081	292780154	294401450	295414760	296048079	296443903	296691293	296845912	296942549	297002947	297040696	297064289	297079035	181055731	224577061	251777892	268778411	279403736	286044564	290195081	292789154	294410450	295423760	296057079	296452903	296700293	296854912	296951549	297011947	29704969297073289	297088035)
}

conditions.each do |level, values|
  values.each do |value|
    Condition.create(:level => level, :value => value.to_i)
  end
end